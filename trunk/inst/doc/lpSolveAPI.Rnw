\documentclass[12pt,a4paper]{article}
\usepackage{natbib}
\usepackage{parskip}
\usepackage{fancyhdr}
\usepackage{setspace}
\usepackage{vmargin}

\setpapersize{A4}
\setmarginsrb{3cm}{2cm}{3cm}{2cm}{1cm}{1cm}{1cm}{2cm}


\begin{document}
\fancyhead[RO,LE]{\thepage}
\fancyhead[LO]{\nouppercase{\rightmark}}
\fancyhead[RE]{\nouppercase{\leftmark}}
\pagestyle{fancy}

\thispagestyle{empty}

\begin{center}
\Huge
lpSolveAPI Package Users Guide \\
\Large
\vspace{1em}
Kjell Konis \\
\end{center}
\vspace{2em}
\normalsize
\onehalfspacing
\tableofcontents
\vfill
\newpage

\setcounter{page}{1}
\section{Introduction}

\subsection{Installation}

Installing the package takes a single command:

<<eval=FALSE>>=
install.packages("lpSolve", repos = "http://r-forge.r-project.org")
@

Note that there is also an lpSolve package available on CRAN. The CRAN version of the package is based on lp\_solve version 5.5.0.8 and does not include the API.
Note

The~\texttt{>} shown before each R command is the R prompt. Only the text after~\texttt{>} must be entered.

\subsection{Getting Help}

Documentation is provided for each function in the lpSolve package using R's built-in help system. For example, the command

<<eval=FALSE>>=
help(add.constraint)
@

will display the documentation for the add.constraint function.

\subsection{Building and Solving Linear Programs Using the lpSolveAPI R Package}

The lpSolveAPI package provides an API for building and solving linear programs that mimics the lp\_solve C API. This approach allows much greater flexibility but also has a few caveats. The most important is that the lpSolve linear program model objects created by make.lp and read.lp are not actually R objects but external pointers to lp\_solve 'lprec' structures. R does not know how to deal with these structures. In particular, R cannot duplicate them. Thus one must never assign an existing lpSolve linear program model object in R code.

Consider the following example. First we create an empty model \texttt{x}.

<<>>=
library(lpSolveAPI)
x <- make.lp(2, 2)
@

Then we assign x to y.

<<>>=
y <- x
@

Next we set some columns in x.

<<>>=
set.column(x, 1, c(1, 2))
set.column(x, 2, c(3, 4))
@

And finally, take a look at y.

<<>>=
y
@

The changes we made in \texttt{x} appear in \texttt{y} as well. Although \texttt{x} and \texttt{y} are two distinct objects in R, they both refer to the same lp\_solve 'lprec' structure.

\subsection{Learning by Example}

<<>>=
lprec <- make.lp(0, 4)
set.objfn(lprec, c(1, 3, 6.24, 0.1))
add.constraint(lprec, c(0, 78.26, 0, 2.9), ">=", 92.3)
add.constraint(lprec, c(0.24, 0, 11.31, 0), "<=", 14.8)
add.constraint(lprec, c(12.68, 0, 0.08, 0.9), ">=", 4)
set.bounds(lprec, lower = c(28.6, 18), columns = c(1, 4))
set.bounds(lprec, upper = 48.98, columns = 4)
RowNames <- c("THISROW", "THATROW", "LASTROW")
ColNames <- c("COLONE", "COLTWO", "COLTHREE", "COLFOUR")
dimnames(lprec) <- list(RowNames, ColNames)
@

Lets take a look at what we have done so far.

<<>>=
lprec  # or equivalently print(lprec)
@

Now lets solve the model.

<<>>=
solve(lprec)
@

<<>>=
get.objective(lprec)
@

<<>>=
get.variables(lprec)
@

<<>>=
get.constraints(lprec)
@

Note that there are some commands that return an answer. For the accessor functions (generally named get.*) the output should be clear. For other functions (e.g., solve), the interpretation of the returned value is described in the documentation. Since solve is generic in R, use the command

<<eval=FALSE>>=
help(solve.lpExtPtr)
@

to view the appropriate documentation. The assignment functions (generally named \texttt{set.*}) also have a return value - often a logical value indicating whether the command was successful - that is returned invisibly. Invisible values can be assigned but are not echoed to the console. For example,

<<>>=
status <- add.constraint(lprec, c(12.68, 0, 0.08, 0.9), ">=", 4)
status
@

indicates that the operation was successful. Invisible values can also be used in flow control.


\section{Further Examples}

\subsection{Solving Dense Mixed Integer/Linear Programs}


\subsection{Sparse Linear Programs: The Transportation Problem}


\subsection{Integer Variables: Non-Integer $c_{ij}$}


\subsection{Binary Variables: The 8 Queens Problem}


\end{document}


